@page "/membershiptypes/create"
@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization

<h3>Crear Nuevo Tipo de Membresía</h3>

<div class="card">
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="HandleCreateMembershipType">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Nombre</label>
                <InputText id="name" class="form-control" @bind-Value="model.Name" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Descripción (Opcional)</label>
                <InputTextArea id="description" class="form-control" @bind-Value="model.Description" />
            </div>

            <div class="mb-3">
                <label for="price" class="form-label">Precio</label>
                <InputNumber id="price" class="form-control" @bind-Value="model.Price" />
            </div>

            <div class="mb-3">
                <label for="duration" class="form-label">Duración (en días)</label>
                <InputNumber id="duration" class="form-control" @bind-Value="model.DurationInDays" />
            </div>

            <button type="submit" class="btn btn-success">Guardar</button>
            <a href="/membershiptypes" class="btn btn-secondary">Cancelar</a>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private CreateMembershipTypeModel model = new();
    private string? errorMessage;

    private async Task HandleCreateMembershipType()
    {
        var httpClient = HttpClientFactory.CreateClient("Api");
        try
        {
            var response = await httpClient.PostAsJsonAsync("api/membershiptypes", model);

            if (response.IsSuccessStatusCode)
            {
                // Si se crea correctamente, redirigimos a la lista
                NavigationManager.NavigateTo("/membershiptypes");
            }
            else
            {
                errorMessage = "Error al crear el tipo de membresía. Por favor, revisa los datos.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error de conexión: {ex.Message}";
        }
    }

    // Este modelo debe coincidir con el CreateMembershipTypeCommand de tu API
    public class CreateMembershipTypeModel
    {
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public decimal Price { get; set; }
        public int DurationInDays { get; set; }
    }
}